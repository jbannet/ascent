# Claude Index - Fitness App

## Project Overview
A comprehensive Flutter fitness application with Go backend featuring AI-driven personalized fitness planning, dynamic onboarding workflows, and matrix-based recommendation systems.

## Architecture
- **Frontend**: Flutter app (`ascent/`) with feature-based organization
- **Backend**: Go server (`server/`) with RESTful API and OpenAPI spec
- **Database**: Firebase integration with local Hive storage
- **AI/ML**: Matrix-based fitness scoring and recommendation engine

## Core Features

### 1. Question Bank System (`ascent/lib/workflows/question_bank/`)
- Code-based question registry replacing JSON configuration
- Type-safe question implementations with validation in setters
- Self-rendering questions with `buildAnswerWidget()` method
- Singleton pattern for consistent question instances
- Real-time visualization for complex questions (nutrition charts)

### 2. Fitness Planning (`ascent/lib/core/fitness_plan/`)
- AI-driven workout and nutrition recommendations
- Block-based workout system with modular components
- Session planning and scheduling
- Progressive overload and adaptation

### 3. Matrix Models (`ascent/lib/core/brain/matrix_models/`)
- PersonVector for user profiling
- ExerciseMatrix for movement patterns
- PatternVector for recommendation algorithms

### 4. Data Models (`ascent/lib/models/`)
- Server-aligned models for consistency
- Comprehensive enum system for domain concepts
- Block system (warmup, exercise, cooldown, rest)
- Progressive session and plan structures

### 5. Fitness Profile System (`ascent/lib/models/fitness_profile_model/`)
- Extension-based feature extraction from typed question answers
- ACSM reference data for fitness norms and percentiles
- Modular calculation system for easy feature updates
- Feature contribution tracking for transparency
- Unified importance calculation across exercise modalities

## Key Directories
- `ascent/lib/workflows/` - Question bank system and workflow management
- `ascent/lib/models/` - Data models including fitness profile extraction
- `ascent/lib/core/` - Core business logic and domain models
- `ascent/lib/ui/` & `ascent/lib/theme/` - UI components and theming
- `ascent/lib/services/` - Firebase, storage, and utility services
- `ascent/lib/routing/` - App navigation and route management
- `server/` - Go backend with handlers, models, and middleware
- `ascent/assets/` - Static assets (JSON config now deprecated)

## Development Patterns
- Provider pattern for state management
- Singleton pattern for question instances
- Factory pattern for dynamic component creation
- Feature-based code organization by business domain
- Type-safe answer storage with validation in setters
- Self-rendering components with `buildAnswerWidget()`
- Extension methods for modular feature calculation
- Registry pattern (QuestionBank) replacing JSON-driven config
- Defensive JSON deserialization handling multiple input types
- Comprehensive testing with widget/unit test coverage

## Recent Architecture Improvements

### Migration from JSON to Code-Based Questions
- Replaced `initial_questions.json` with `QuestionBank` registry
- Each question is now a strongly-typed class with validation
- Compile-time type checking eliminates runtime errors
- Self-contained questions handle their own rendering and validation

### Type Safety Enhancements
- **Typed Answer Storage**: Each question has specific typed fields (DateTime?, List<String>?, int?)
- **Validation in Setters**: Invalid data is prevented at storage time
- **Defensive Deserialization**: JSON input handles multiple formats gracefully
- **Compile-time Checking**: Type mismatches caught during development

### Self-Rendering Question Pattern
- Questions encapsulate UI logic with `buildAnswerWidget()` method
- Specialized views for complex interactions (nutrition with real-time charts)
- Consistent styling and behavior across question types
- Reduced coupling between question logic and UI components

### Feature Extraction Improvements
- Extension methods on FitnessProfile for modular feature calculation
- Type-safe access to question answers for feature extraction
- ACSM reference data integration for fitness percentiles
- Feature contribution tracking for transparency and debugging

## Tech Stack
- **Frontend**: Flutter/Dart with Provider state management
- **Backend**: Go with Gin framework, OpenAPI specification
- **Database**: Firebase (Auth, Firestore, Storage, Messaging)
- **Local Storage**: Hive for offline-first capability
- **Testing**: Flutter test framework with comprehensive coverage

## Business Logic Highlights
- Conditional question flow based on user responses
- Matrix-based AI recommendations for personalized fitness
- Block-based workout construction with factory patterns
- Progressive adaptation based on user performance
- Multi-modal progress tracking (photos, metrics, feelings)

## Integration Points
- Firebase Authentication and real-time data sync
- Go backend API for complex business logic
- Local Hive storage for offline capability
- OpenAPI specification for type-safe client/server communication