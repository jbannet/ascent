# Codebase Index - Fitness App

## Flutter Frontend (`ascent/`)

### Question Bank System (`ascent/lib/workflows/question_bank/`)

#### Registry (`registry/`)
- **question_bank.dart** - Central registry for all questions, single source of truth
  - Replaces JSON configuration with code-based question definitions
  - Maintains question order and categorization
  - Provides access methods for evaluation and UI

#### Question Implementations (`questions/`)
- **onboarding_question.dart** - Base abstract class with type-safe answer storage
- **demographics/**
  - `age_question.dart` - Type-safe DateTime answer with calculated age
  - `gender_question.dart` - String answer with validation
  - `height_question.dart` - Double answer with unit conversion
  - `weight_question.dart` - Double answer with unit conversion
- **fitness_assessment/**
  - `q4_twelve_minute_run_question.dart` - Double answer for Cooper test
  - `q4a_fall_history_question.dart` - Boolean answer with conditional logic
  - `q4b_fall_risk_factors_question.dart` - List<String> answer with risk factors
  - `q5_pushups_question.dart` - Integer answer with validation
  - `q6_bodyweight_squats_question.dart` - Integer answer with validation
  - `q6a_chair_stand_question.dart` - Boolean answer for functional assessment
  - `glp1_medications_question.dart` - Boolean answer with medical implications
  - `session_commitment_question.dart` - String answer for scheduling
- **goals/**
  - `fitness_goals_question.dart` - List<String> answer with multiple selection
- **lifestyle/**
  - `sleep_hours_question.dart` - Double answer with range validation
- **motivation/**
  - `primary_motivation_question.dart` - String answer with single selection
  - `progress_tracking_question.dart` - String answer with tracking preferences
- **nutrition/**
  - `sugary_treats_question.dart` - Integer answer with chart visualization
  - `sodas_question.dart` - Integer answer with real-time chart updates
  - `grains_question.dart` - Integer answer with nutritional context
  - `alcohol_question.dart` - Integer answer with health considerations
  - `nutrition_questions_integration.dart` - Cross-question data sharing
- **practical_constraints/**
  - `q1_injuries_question.dart` - List<String> answer with injury types
  - `q2_high_impact_question.dart` - List<String> answer with medical restrictions
  - `q10_equipment_question.dart` - List<String> answer with available equipment
  - `q11_training_location_question.dart` - List<String> answer with location preferences

#### View Components (`views/`)
- **base_question_view.dart** - Abstract base for question rendering
- **question_input_view.dart** - Main input widget with factory pattern
- **question_types/** - Type-specific input widgets
  - `single_choice_view.dart` - Radio button selections
  - `multiple_choice_view.dart` - Checkbox selections
  - `text_input_view.dart` - Text input with validation
  - `number_input_view.dart` - Numeric input with constraints
  - `slider_view.dart` - Range slider for continuous values
  - `date_picker_view.dart` - Date selection widget
  - `dual_picker_view.dart` - Combined picker for complex inputs
  - `wheel_picker_view.dart` - iOS-style wheel picker
- **nutrition/** - Specialized nutrition question views
  - `diet_quality_chart.dart` - Real-time chart visualization for nutrition data
  - `diet_quality_summary.dart` - Nutritional summary display
  - `nutrition_onboarding_demo.dart` - Interactive nutrition onboarding

### Fitness Profile System (`ascent/lib/models/fitness_profile_model/`)

#### Core Model
- **fitness_profile.dart** - Main profile class with feature extraction methods
- **feature_contribution.dart** - Tracks how each answer contributes to final features

#### Feature Extraction Extensions (`fitness_profile_extraction_extensions/`)
- **relative_objective_importance.dart** - Unified importance calculation across all modalities
- **cardio.dart** - Cardiovascular fitness metrics and training parameters
- **strength.dart** - Strength fitness metrics from pushup/squat assessments
- **balance.dart** - Balance and fall risk assessment
- **functional.dart** - Activities of daily living and functional fitness
- **flexibility.dart** - Range of motion and stretching requirements
- **low_impact.dart** - Medical restriction and joint-friendly exercise needs
- **weight_management.dart** - BMI and weight-related exercise modifications
- **injuries.dart** - Injury history impact on exercise selection
- **age_bracket.dart** - Age-specific exercise considerations

#### Reference Data (`reference_data/`)
- **acsm_cardio_norms.dart** - ACSM cardiovascular fitness norms by age/gender
- **acsm_pushup_norms.dart** - ACSM pushup performance norms
- **acsm_squat_norms.dart** - ACSM squat performance norms
- **age_group_utility.dart** - Age group classification utilities

### Core Business Logic (`ascent/lib/core/`)

#### Brain/AI System (`brain/`)
- **matrix_models/**
  - `person_vector.dart` - User profile representation for AI
  - `exercise_matrix.dart` - Exercise relationship and similarity matrix
  - `pattern_vector.dart` - Pattern recognition for recommendations

#### Fitness Planning (`fitness_plan/`)
- **views/**
  - `plan_view.dart` - Overall fitness plan display
  - `week_view.dart` - Weekly workout overview
  - `day_view.dart` - Daily workout detail
  - `exercise_view.dart` - Individual exercise instruction
  - **block_cards/** - Modular workout components
    - `block_view.dart` - Block container and layout
    - `block_step_card_factory.dart` - Factory for step cards
    - `exercise_step_card.dart` - Exercise instruction card
    - `warmup_step_card.dart` - Warmup routine card
    - `cooldown_step_card.dart` - Cooldown routine card
    - `rest_step_card.dart` - Rest period card

### Data Models (`ascent/lib/models/`)

#### Core Models
- `plan.dart` - Overall fitness plan structure
- `planned_week.dart` - Weekly training structure
- `planned_day.dart` - Daily workout structure
- `session.dart` - Individual workout session
- `intensity.dart` - Exercise intensity specifications
- `rep_spec.dart` - Repetition and set specifications

#### Block System (`blocks/`)
- `block.dart` - Base block container
- `block_step.dart` - Abstract step in workout blocks
- `exercise_prescription_step.dart` - Prescribed exercise with parameters
- `warmup_step.dart` - Warmup routine specification
- `cooldown_step.dart` - Cooldown routine specification
- `rest_step.dart` - Rest period specification

#### Server-Side Concepts (`server_side_concepts/`)
- `baseline.dart` - User fitness baseline measurements
- `progression.dart` - Progressive overload algorithms
- `phase.dart` - Training phase definitions
- `ruleset.dart` - Business rules and constraints
- `available_equipment.dart` - Equipment availability tracking
- `physical_constraints.dart` - User physical limitations
- `readiness_adjustment.dart` - Workout readiness algorithms

### Enumerations (`ascent/lib/enums/`)
- `goal.dart` - Fitness goal types
- `experience_level.dart` - User experience classifications
- `session_status.dart` - Workout session states
- `session_tag.dart` - Session categorization tags
- `energy_system_tag.dart` - Energy system targeting
- `progression_mode.dart` - Progression algorithms
- `intensity_mode.dart` - Intensity calculation methods
- `item_mode.dart` - Item display modes
- `block_type.dart` - Workout block categories
- `block_step_kind.dart` - Step type classifications
- `rep_kind.dart` - Repetition types
- `day_of_week.dart` - Day enumeration
- `missed_session_policy.dart` - Makeup session policies

### Services (`ascent/lib/services/`)

#### Firebase Integration (`firebase/`)
- `firebase_client.dart` - Main Firebase client configuration
- `firebase_auth_service.dart` - Authentication service
- `firebase_storage_service.dart` - Cloud storage operations
- `firebase_retry_service.dart` - Retry logic for Firebase operations

#### Utilities (`general_utilities/`)
- `list_extensions.dart` - List utility extensions
- `num_formatter.dart` - Number formatting utilities

#### Configuration (`load_configuration/`)
- `question_configuration_service.dart` - JSON question loader

#### Local Storage
- `local_storage/local_storage_service.dart` - Hive local database service

### UI and Theming (`ascent/lib/theme/`)

#### Core Theme
- `app_theme.dart` - Main application theme configuration
- `app_colors.dart` - Color palette definitions

#### Universal Widgets (`general_widgets/`)
- **buttons/**
  - `universal_elevated_button.dart` - Primary action buttons
  - `universal_outlined_button.dart` - Secondary action buttons
  - `universal_text_button.dart` - Text-only buttons
- `universal_progress_indicator.dart` - Loading indicators
- `swoosh_clipper.dart` - Custom shape clipper

### Navigation (`ascent/lib/routing/`)
- `app_router.dart` - Main router configuration
- `route_names.dart` - Route name constants
- **routes/**
  - `home_routes.dart` - Home screen routes
  - `onboarding_routes.dart` - Onboarding flow routes
  - `plan_routes.dart` - Fitness plan routes
  - `exercise_routes.dart` - Exercise detail routes

### Configuration Files
- `main.dart` - Application entry point
- `constants.dart` - Application constants
- `firebase_options.dart` - Firebase configuration
- `temporary_navigator_view.dart` - Development navigation aid

### Assets (`ascent/assets/`)
- `config/initial_questions.json` - Legacy onboarding question configuration (deprecated - use QuestionBank registry)

## Key Features

### Question Bank Registry System
- Central `QuestionBank` class serves as single source of truth
- Replaces JSON configuration with type-safe code-based questions
- Singleton pattern ensures consistent question instances
- Questions self-render with `buildAnswerWidget()` method

### Type-Safe Answer Storage
- Each question has strongly typed answer fields (DateTime?, List<String>?, int?, etc.)
- Validation built into setter methods prevents invalid data
- Compile-time type checking eliminates runtime errors
- Defensive JSON deserialization handles multiple input formats

### Self-Rendering Questions
- Questions encapsulate their own UI rendering logic
- Specialized views for complex questions (nutrition with charts)
- Real-time visualization updates as user interacts
- Consistent styling and behavior across question types

### Feature Extraction System
- Extension methods calculate features from typed question answers
- ACSM reference data provides fitness norms and percentiles
- Modular calculation allows for easy feature updates
- Feature contribution tracking for transparency

## Go Backend (`server/`)

### Main Application
- `main.go` - Server entry point and configuration
- `generate.go` - Code generation utilities

### API Layer
- `routes/routes.go` - Route definitions and middleware setup
- `api/generated.go` - OpenAPI generated code

### Handlers (`handlers/`)
- `health.go` - Health check endpoint
- `user.go` - User management operations
- `onboarding.go` - Onboarding data processing
- `plan.go` - Fitness plan operations

### Models (`models/`)
- `user.go` - User data structures
- `session.go` - Session data structures
- `plan.go` - Plan data structures
- `onboarding.go` - Onboarding response structures

### Infrastructure
- **database/**
  - `connection.go` - Database connection management
- **middleware/**
  - `cors.go` - Cross-origin resource sharing
  - `auth.go` - Authentication middleware
- **config/**
  - `config.go` - Server configuration management

## Testing (`ascent/tests/`)
- `onboarding_workflow/widgets/onboarding/question_input/test_ranking_widget.dart` - Ranking widget tests

## Configuration Files
- `ascent/pubspec.yaml` - Flutter dependencies and configuration
- `ascent/devtools_options.yaml` - Development tools configuration
- `server/go.mod` & `server/go.sum` - Go module dependencies
- `.claude/settings.local.json` - Claude Code configuration
- `CLAUDE.md` - Project-specific instructions for Claude Code