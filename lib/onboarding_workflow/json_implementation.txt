# Onboarding Workflow Architecture

## SECTION 1: JSON DATA STRUCTURES

### 1. JSON Format for Questions

```json
{
  "version": "1.0.0",
  "sections": [
    {
      "section_id": "personal_info",
      "title": "Personal Information",
      "reason": "We need your basic information to personalize your fitness journey",
      "questions": [
        {
          "id": "name",
          "question": "What's your name?",
          "type": "text_input",
          "validation": {
            "required": true,
            "min_length": 1
          }
        },
        {
          "id": "age",
          "question": "How old are you?",
          "type": "number_input",
          "validation": {
            "required": true,
            "min": 13,
            "max": 100
          }
        },
        {
          "id": "goals",
          "question": "What are your primary fitness goals?",
          "type": "multiple_choice",
          "options": [
            {"value": "lose_weight", "label": "Lose weight"},
            {"value": "build_muscle", "label": "Build muscle"},
            {"value": "improve_endurance", "label": "Improve endurance"}
          ],
          "validation": {
            "max_selections": 3
          }
        }
      ]
    }
  ]
}
```

Key pieces for each question:
- **id**: Unique identifier (used as the key in answers JSON)
- **question**: Display text
- **type**: Input type (text_input, number_input, single_choice, multiple_choice, slider, etc.)
- **options**: For choice questions
- **validation**: Rules for the answer
- **conditional**: (optional) Show/hide logic based on other answers

### 2. JSON Format for Answers

```json
{
  "onboarding_version": "1.0.0",
  "completed": false,
  "started_at": "2024-01-15T10:00:00Z",
  "completed_at": null,
  "answers": {
    "name": "John Doe",
    "age": 28,
    "goals": ["lose_weight", "build_muscle"],
    "weight": 180,
    "height": 72,
    "fitness_level": "intermediate",
    "medical_details": null
  }
}
```

**Important**: The keys in the `answers` object match the question `id` values exactly. This creates a direct mapping between questions and their answers.

The answers object is a flexible key-value structure that contains ONLY direct user responses. Skipped questions are stored as `null` values. The `completed` flag tracks whether onboarding is finished.

### 3. JSON Format for Derived Metrics

**Quantitative calculations returned from server:**

```json
{
  "last_calculated": "2024-01-15T10:30:00Z",
  "bmi": 24.4,
  "target_heart_rate_min": 120,
  "target_heart_rate_max": 160,
  "recommended_calories": 2200,
  "fitness_score": 65,
  "fitness_percentile": 72,
  "motivation_primary": "achievement",
  "motivation_secondary": "social",
  "workout_frequency_days": 4,
  "session_duration_minutes": 45,
  "intensity_level": "moderate",
  "program_type": "hybrid_strength_cardio"
}
```

### 4. JSON Format for Derived Conclusions

**Qualitative insights returned from server:**

```json
{
  "last_generated": "2024-01-15T10:30:00Z",
  "workout_personality": "achievement_focused",
  "recommended_program": "progressive_strength",
  "motivation_strategy": "goal_tracking_with_milestones",
  "ideal_workout_time": "morning",
  "social_features": ["leaderboards", "challenges"],
  "risk_factors": ["needs_warmup_focus", "monitor_knee_stress"],
  "coaching_style": "encouraging_with_data",
  "progression_rate": "moderate",
  "recovery_needs": "standard",
  "nutrition_focus": "protein_timing"
}
```

## SECTION 2: SERVICES AND PROVIDERS

### 1. File Structure

**Files to create:**

In `lib/onboarding_workflow/providers/`:
- `onboarding_provider.dart` - Main provider that manages state and coordinates services

In `lib/onboarding_workflow/utils/`:
- `json_parser.dart` - Utility for parsing JSON to/from Dart objects

In `lib/onboarding_workflow/services/local_storage/`:
- `hive_storage.dart` - Manages Hive database initialization and boxes
- `answer_storage.dart` - Saves/loads answers locally using Hive
- `question_cache.dart` - Caches questions from server locally using Hive
- `metrics_storage.dart` - Stores derived metrics locally using Hive
- `conclusions_storage.dart` - Stores derived conclusions locally using Hive
- `app_state_storage.dart` - Stores app state flags using Hive (onboarding status, version, user_id)

In `lib/onboarding_workflow/services/firebase/`:
- `initialize_firebase.dart` - Sets up Firebase connection
- `questions_firebase.dart` - Get questions from Firebase
- `answers_firebase.dart` - Save/get answers to/from Firestore
- `metrics_firebase.dart` - Save/get metrics to/from Firestore  
- `conclusions_firebase.dart` - Save/get conclusions to/from Firestore
- `calculate_baseline.dart` - Sends answers to server, receives metrics and conclusions

### 2. Data Flow Architecture

```
[UI Layer]
    ↓
[OnboardingProvider]
    ↓
[Services Layer]
    ├── Firebase Services (remote operations)
    │   ├── questions_firebase.dart
    │   ├── calculate_baseline.dart
    │   └── [save/get services]
    │
    ├── Local Storage Services (local operations)
    │   ├── answer_storage.dart
    │   ├── question_cache.dart
    │   └── metrics_storage.dart
    │
    └── Utils (shared helpers)
        └── json_parser.dart
```

The provider coordinates between services and exposes data to the UI.

### 3. Local Storage Structure

**Using Hive Database:**
- Type-safe and faster than JSON files
- Built-in encryption support
- Lazy loading for better performance
- No need for manual JSON parsing

```
[Hive Boxes]
├── answersBox
│   └── answers                       // Current answers (with completion flag)
├── questionsBox
│   └── cached_questions              // Latest from server
├── metricsBox
│   └── baseline                      // Server-calculated metrics
├── conclusionsBox
│   └── derived                       // Personalized insights and recommendations
└── appStateBox
    ├── onboarding_completed          // bool: Completion status
    ├── onboarding_version            // String: Version completed
    └── user_id                       // String: Firebase user ID
```

**Firebase Persistence Strategy:**
- Answers are saved to Firebase ONLY when:
  1. User completes entire onboarding
  2. User explicitly saves progress (if we add that feature)
- Local Hive database is source of truth during onboarding
- Firebase is for long-term storage and cross-device sync

### 4. Service Responsibilities

**Utils:**
- `json_parser.dart`
  - `toJson(Object) → String`
  - `fromJson(String) → Map<String, dynamic>`
  - `parseQuestions(Map) → List<Question>`
  - `parseAnswers(Map) → AnswerData`

**Local Storage Services:**
- `hive_storage.dart`
  - `initialize() → Future<void>`
  - `clearAllBoxes() → Future<void>`

- `answer_storage.dart` (uses Hive)
  - `save(Map<String, dynamic> answers) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`
  - `clear() → Future<void>`

- `question_cache.dart` (uses Hive)
  - `save(Map<String, dynamic> questions) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`
  - `clear() → Future<void>`

- `metrics_storage.dart` (uses Hive)
  - `save(Map<String, dynamic> metrics) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`
  - `clear() → Future<void>`

- `conclusions_storage.dart` (uses Hive)
  - `save(Map<String, dynamic> conclusions) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`
  - `clear() → Future<void>`

- `app_state_storage.dart` (uses Hive)
  - `setOnboardingComplete(bool value) → Future<void>`
  - `isOnboardingComplete() → Future<bool>`
  - `setOnboardingVersion(String version) → Future<void>`
  - `getOnboardingVersion() → Future<String?>`
  - `setUserId(String id) → Future<void>`
  - `getUserId() → Future<String?>`

**Firebase Services:**
- `initialize_firebase.dart`
  - `initializeApp() → Future<void>`
  - `getCurrentUser() → User?`
  - `signInAnonymously() → Future<User>`

- `questions_firebase.dart`
  - `get() → Future<Map<String, dynamic>?>`
  - `getVersion() → Future<String?>`

- `answers_firebase.dart`
  - `save(Map<String, dynamic> answers) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`

- `metrics_firebase.dart`
  - `save(Map<String, dynamic> metrics) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`

- `conclusions_firebase.dart`
  - `save(Map<String, dynamic> conclusions) → Future<void>`
  - `get() → Future<Map<String, dynamic>?>`

- `calculate_baseline.dart`
  - `calculate(Map<String, dynamic> answers) → Future<Map<String, dynamic>>`
  // Returns both metrics and conclusions from server

### 5. Firestore Structure

```
firestore/
└── users/
    └── {userId}/
        ├── profile (document)
        │   └── answers: {map of all answers}
        ├── metrics (document)
        │   └── baseline: {all calculated metrics}
        └── derived_conclusions (document)
            └── {personalized insights and recommendations based on answers and metrics}
```

### 6. Three-tier Question Loading Strategy (Future Enhancement)

Once local loading is complete, overlay this strategy:

1. **Embedded JSON file** (assets/onboarding/questions_v1.json)
   - Ships with the app
   - Ensures onboarding works offline on first launch
   - Fallback if remote fetch fails

2. **Local cache** (Hive questionsBox)
   - Stores the latest downloaded version
   - Updated when remote version is newer
   - Survives app restarts

3. **Remote source** (Firebase Remote Config or Firestore)
   - Master source of truth
   - Allows updating questions without app update
   - Can A/B test different flows

## SECTION 3: MODELS

### Question Models

**Location:** `lib/onboarding_workflow/models/question_models.dart`

```dart
enum QuestionType {
  textInput,
  numberInput, 
  singleChoice,
  multipleChoice,
  slider,
  datePicker
}

class QuestionOption {
  final String value;
  final String label;
  
  QuestionOption({required this.value, required this.label});
  
  factory QuestionOption.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}

class QuestionValidation {
  final bool? required;
  final int? minLength;
  final int? maxLength;
  final num? min;
  final num? max;
  final int? maxSelections;
  
  QuestionValidation({
    this.required,
    this.minLength,
    this.maxLength,
    this.min,
    this.max,
    this.maxSelections,
  });
  
  factory QuestionValidation.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}

class QuestionCondition {
  final String questionId;
  final String operator; // equals, contains, isNotEmpty
  final dynamic value;
  
  QuestionCondition({
    required this.questionId,
    required this.operator,
    this.value,
  });
  
  factory QuestionCondition.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}

class OnboardingQuestion {
  final String id;
  final String question;
  final QuestionType type;
  final List<QuestionOption>? options;
  final QuestionValidation? validation;
  final QuestionCondition? condition;
  
  OnboardingQuestion({
    required this.id,
    required this.question,
    required this.type,
    this.options,
    this.validation,
    this.condition,
  });
  
  factory OnboardingQuestion.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}

class QuestionSection {
  final String sectionId;
  final String title;
  final String reason;
  final List<OnboardingQuestion> questions;
  
  QuestionSection({
    required this.sectionId,
    required this.title,
    required this.reason,
    required this.questions,
  });
  
  factory QuestionSection.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}

class QuestionConfiguration {
  final String version;
  final List<QuestionSection> sections;
  
  QuestionConfiguration({
    required this.version,
    required this.sections,
  });
  
  factory QuestionConfiguration.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}
```

### Answer Models

**Location:** `lib/onboarding_workflow/models/answer_models.dart`

```dart
class OnboardingAnswers {
  final String onboardingVersion;
  final bool completed;
  final DateTime startedAt;
  final DateTime? completedAt;
  final Map<String, dynamic> answers; // Keys match question IDs
  
  OnboardingAnswers({
    required this.onboardingVersion,
    required this.completed,
    required this.startedAt,
    this.completedAt,
    required this.answers,
  });
  
  factory OnboardingAnswers.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
  
  // Helper methods
  dynamic getAnswer(String questionId) => answers[questionId];
  bool isAnswered(String questionId) => answers.containsKey(questionId) && answers[questionId] != null;
  void setAnswer(String questionId, dynamic value) => answers[questionId] = value;
}
```

### State Models

**Location:** `lib/onboarding_workflow/models/state_models.dart`

```dart
enum OnboardingStatus {
  notStarted,
  inProgress,
  completed
}

class OnboardingState {
  final String? currentQuestionId;
  final int currentSectionIndex;
  final int currentQuestionIndex;
  final OnboardingStatus status;
  final double progressPercentage;
  
  OnboardingState({
    this.currentQuestionId,
    required this.currentSectionIndex,
    required this.currentQuestionIndex,
    required this.status,
    required this.progressPercentage,
  });
  
  OnboardingState copyWith({
    String? currentQuestionId,
    int? currentSectionIndex,
    int? currentQuestionIndex,
    OnboardingStatus? status,
    double? progressPercentage,
  });
}

class AppState {
  final bool onboardingCompleted;
  final String? onboardingVersion;
  final String? userId;
  
  AppState({
    required this.onboardingCompleted,
    this.onboardingVersion,
    this.userId,
  });
  
  factory AppState.fromJson(Map<String, dynamic> json);
  Map<String, dynamic> toJson();
}
```

### Files to Create

In `lib/onboarding_workflow/models/`:
- `question_models.dart` - Question-related models and enums
- `answer_models.dart` - Answer data structures  
- `state_models.dart` - State tracking models