// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BlockStepKind.
const (
	BlockStepKindCooldown             BlockStepKind = "cooldown"
	BlockStepKindExercisePrescription BlockStepKind = "exercise_prescription"
	BlockStepKindRest                 BlockStepKind = "rest"
	BlockStepKindWarmup               BlockStepKind = "warmup"
)

// Defines values for BlockType.
const (
	BlockTypeCardio   BlockType = "cardio"
	BlockTypeCooldown BlockType = "cooldown"
	BlockTypeStrength BlockType = "strength"
	BlockTypeWarmup   BlockType = "warmup"
)

// Defines values for Goal.
const (
	BuildMuscle            Goal = "build_muscle"
	Endurance              Goal = "endurance"
	GeneralStrengthFitness Goal = "general_strength_fitness"
	GetStronger            Goal = "get_stronger"
	LoseFat                Goal = "lose_fat"
	MobilityHealth         Goal = "mobility_health"
)

// Defines values for IntensityMode.
const (
	Percentage IntensityMode = "percentage"
	Rpe        IntensityMode = "rpe"
	Weight     IntensityMode = "weight"
)

// Defines values for RepKind.
const (
	Distance RepKind = "distance"
	Reps     RepKind = "reps"
	Time     RepKind = "time"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// Block defines model for Block.
type Block struct {
	Items                []BlockStep `json:"items"`
	Label                *string     `json:"label,omitempty"`
	RestSecBetweenRounds int         `json:"rest_sec_between_rounds"`
	Rounds               int         `json:"rounds"`
	Type                 BlockType   `json:"type"`
}

// BlockStep defines model for BlockStep.
type BlockStep struct {
	CooldownStep         *CooldownStep         `json:"cooldown_step,omitempty"`
	ExercisePrescription *ExercisePrescription `json:"exercise_prescription,omitempty"`
	Kind                 BlockStepKind         `json:"kind"`
	RestStep             *RestStep             `json:"rest_step,omitempty"`
	WarmupStep           *WarmupStep           `json:"warmup_step,omitempty"`
}

// BlockStepKind defines model for BlockStepKind.
type BlockStepKind string

// BlockType defines model for BlockType.
type BlockType string

// CooldownStep defines model for CooldownStep.
type CooldownStep struct {
	Description string `json:"description"`
	DurationSec int    `json:"duration_sec"`
}

// Error defines model for Error.
type Error struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// ExercisePrescription defines model for ExercisePrescription.
type ExercisePrescription struct {
	ExerciseName string    `json:"exercise_name"`
	Intensity    Intensity `json:"intensity"`
	RepSpec      RepSpec   `json:"rep_spec"`
}

// Goal defines model for Goal.
type Goal string

// HealthStatus defines model for HealthStatus.
type HealthStatus struct {
	Server string `json:"server"`
	Status string `json:"status"`
}

// Intensity defines model for Intensity.
type Intensity struct {
	Mode       IntensityMode `json:"mode"`
	Percentage *float32      `json:"percentage,omitempty"`
	Rpe        *float32      `json:"rpe,omitempty"`
	Weight     *float32      `json:"weight,omitempty"`
}

// IntensityMode defines model for IntensityMode.
type IntensityMode string

// OnboardingResponse defines model for OnboardingResponse.
type OnboardingResponse struct {
	Message string  `json:"message"`
	Status  string  `json:"status"`
	UserId  *string `json:"user_id,omitempty"`
}

// OnboardingSubmission defines model for OnboardingSubmission.
type OnboardingSubmission struct {
	// Answers Key-value pairs of question IDs to answers
	Answers map[string]interface{} `json:"answers"`
}

// Plan defines model for Plan.
type Plan struct {
	Goal       Goal          `json:"goal"`
	NotesCoach *string       `json:"notes_coach,omitempty"`
	PlanId     string        `json:"plan_id"`
	Sessions   []Session     `json:"sessions"`
	StartDate  time.Time     `json:"start_date"`
	UserId     string        `json:"user_id"`
	Weeks      []PlannedWeek `json:"weeks"`
}

// PlanGenerationRequest defines model for PlanGenerationRequest.
type PlanGenerationRequest struct {
	Goal   Goal   `json:"goal"`
	UserId string `json:"user_id"`
}

// PlannedDay defines model for PlannedDay.
type PlannedDay struct {
	Date time.Time `json:"date"`

	// SessionId Optional reference to a session for this day
	SessionId *string `json:"session_id,omitempty"`
}

// PlannedWeek defines model for PlannedWeek.
type PlannedWeek struct {
	Days       []PlannedDay `json:"days"`
	StartDate  time.Time    `json:"start_date"`
	WeekNumber int          `json:"week_number"`
}

// RepKind defines model for RepKind.
type RepKind string

// RepSpec defines model for RepSpec.
type RepSpec struct {
	Distance *string `json:"distance,omitempty"`
	Kind     RepKind `json:"kind"`
	Reps     *int    `json:"reps,omitempty"`
	TimeSec  *int    `json:"time_sec,omitempty"`
}

// RestStep defines model for RestStep.
type RestStep struct {
	DurationSec int `json:"duration_sec"`
}

// Session defines model for Session.
type Session struct {
	Blocks []Block `json:"blocks"`
	Id     string  `json:"id"`
	Title  string  `json:"title"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"created_at"`
	Email     openapi_types.Email `json:"email"`
	Id        string              `json:"id"`
	UpdatedAt time.Time           `json:"updated_at"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// UserRegistration defines model for UserRegistration.
type UserRegistration struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// WarmupStep defines model for WarmupStep.
type WarmupStep struct {
	Description string `json:"description"`
	DurationSec int    `json:"duration_sec"`
}

// SubmitOnboardingAnswersJSONRequestBody defines body for SubmitOnboardingAnswers for application/json ContentType.
type SubmitOnboardingAnswersJSONRequestBody = OnboardingSubmission

// GenerateFitnessPlanJSONRequestBody defines body for GenerateFitnessPlan for application/json ContentType.
type GenerateFitnessPlanJSONRequestBody = PlanGenerationRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = UserRegistration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit onboarding survey answers
	// (POST /api/onboarding/submit)
	SubmitOnboardingAnswers(w http.ResponseWriter, r *http.Request)
	// Generate a new fitness plan
	// (POST /api/plan/generate)
	GenerateFitnessPlan(w http.ResponseWriter, r *http.Request)
	// Get user's current fitness plan
	// (GET /api/plan/{userID})
	GetUserPlan(w http.ResponseWriter, r *http.Request, userID string)
	// User login
	// (POST /api/user/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /api/user/register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Submit onboarding survey answers
// (POST /api/onboarding/submit)
func (_ Unimplemented) SubmitOnboardingAnswers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Generate a new fitness plan
// (POST /api/plan/generate)
func (_ Unimplemented) GenerateFitnessPlan(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user's current fitness plan
// (GET /api/plan/{userID})
func (_ Unimplemented) GetUserPlan(w http.ResponseWriter, r *http.Request, userID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login
// (POST /api/user/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /api/user/register)
func (_ Unimplemented) RegisterUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SubmitOnboardingAnswers operation middleware
func (siw *ServerInterfaceWrapper) SubmitOnboardingAnswers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitOnboardingAnswers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GenerateFitnessPlan operation middleware
func (siw *ServerInterfaceWrapper) GenerateFitnessPlan(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateFitnessPlan(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserPlan operation middleware
func (siw *ServerInterfaceWrapper) GetUserPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithOptions("simple", "userID", chi.URLParam(r, "userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserPlan(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/onboarding/submit", wrapper.SubmitOnboardingAnswers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/plan/generate", wrapper.GenerateFitnessPlan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/plan/{userID}", wrapper.GetUserPlan)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/register", wrapper.RegisterUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.HealthCheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xZS2/bOBD+KwR3gb2osbPtofAtbbqt0RYNnBQ9FIFAS2ObDUWyJJXUKPzfF3zJetCP",
	"bJNsb7JFDr/5vuFwRvyJC1FJwYEbjSc/sS5WUBH3eFab1Qy0FFyD/S2VkKAMBffWiBvg7mEtAU+wNory",
	"Jd5kuNag7Is/FSzwBP8x2q4wCuZHn+2YzSbDCr7XVEGJJ1+DyWDgOouWxfwbFMZafsVEcTOEQg1U3Yd9",
	"SzsjlwaktRiWIEqRtf3NyBxY0isF2uQainwO5g6A50rUvHSrlbAgNTN4Ms5wRTmt6so9BxuUG1hadzOc",
	"mHPamnOamuP/OcKnKztwwKn9s1l4txtZIG8n7Y6xAfWFEKwUdzzX4fU+lK/D4Eg+/ABVUA25VKALRaWh",
	"gh8y8iZMumjP2WT4hvLyaOnf28GNqEdAn4E2EfYdUVUtj5r2xQ31E3vCOLx72X4fPAJuY+PrDrq8EzjC",
	"wlmjScv6Noy3kdKy3EzVRgFfmlXbSoYLokoqkuY6kg6io+zKOphd1orYlzYg7YB9G6FHX9mhoGMoReob",
	"pYQaAoT49wBaBVqTJSTe9YB4E9sJydVTMTsEE/XlpIIkKEsG19SsD8XdtBno0MpcS8/w/hiXl3bYwMMO",
	"rpa9NqCU228FYe0wW4LdbEpwK2iGmdCQL4iN3SVwUITlMf7yBTUctE1L85qyMq9qXTC7OHCrNS/scyXm",
	"lFGzzldAmFklA/Sde3VpiKn1kHIN6tYfVvCDVJLZuWHpZ+FdwqZurG1neQjr4fAemWFuFpdO8TZty9wF",
	"XIkSjhb/ox28ybAEVQA3IZwXQlXEWEeZcORX5EfYdeP0Acbrah7OL3nQRPI421q4A7pcmbSR3Sv3SHQs",
	"7GXuY+Aphp5yp2CLiAZJKmg+8bmwOY8vd9c/uxNEOkB0XRQ+opMFU07Lw7mmCZ59yWYL/rKeV1TrZLIh",
	"XN+B8o9lSW1GIuyiNcSoGrJuBsfvYf3slrAakCRUaSQW6HsN2r5F03ONjEDR7gBYz5U4LuXBBSMJxMuQ",
	"TfaFvss4mwxzYUDnhSDFqlNs4RT9khGept/uUsff8dXlpZ+Qqi21IcrkJTHdPWT/eGaoS633CA0bwHBz",
	"PDBLKofyC8DNEFxPnMjIdv3M099xIiJosbRLzbcuv9s4mYGLmF+T9+gN04O/Cx6H8pwksu39tAosBGDd",
	"nfNJ+h2GFCxAAS/AbRYU5qCFUMisqEYlOXyGOFh7fHEaJ5xZ3ztazn3kPkQk21jJQz6/X6nXntkLQOdT",
	"ionZsHxWIF1a8vhKqo0rI1L5P1ZCQw7jrNR+PKYDmbV7D6kPMeHh/ofyeGd30TQyQ99+oRg/VH7HrDhY",
	"dG7bkXv27qmI3JEiDTXsiBreZQg/NouQUm58Dl82ej2wAmKgzIk5fjdARSjrDPf/JIbucK2W5T1XTTkd",
	"V2350DG9i4UPYklTLczxbkmi9Z1QRyTxaKKZsQvUDJZUGx+KD4atovyD74knL7OHQNr6JvDbNswb12wu",
	"hP/Eww0pXJT5xhT/4zskdCYlugJSOWSd42725vIKnV1Mw7kG6EzbwhvFma5zA0SkZLQgAROjBYRSOyz0",
	"cXrV2sWddc8upjjDt6B8XsGnJ+OTsR0sJHAiKZ7g5yfjk+dODbNy7I6IpCPRlMcjbetjX4oIX5JYLRyc",
	"aYkn2NXPZltPnzW1rfJVzCtRriNFwJ2Flkujb9rL6LPXodyWrNs3XRltUe4/W7muxHn193j8CBiaxsch",
	"6BUzzahY7iOphO1uoEShz1nUjLnM/OIB4fmvOAlEU35LGC1R0MUFv66riqh1oyPaKo90rW5h3W5WyFLb",
	"XbJ1DV9bIy5kbDk88p8ofMWTDpdQ5EIIU9fFPE6opEvqJ44V519Ci7hLLWsosvZbxkUUDBHE4Q4tWsBb",
	"IeH87AXDT9tYTM83rnGBZCwYeyKFGJBEkQqM67e/9lsDOw5Nz93XNDxx2QpnMQP6dXBf16xFTP9Iuv4f",
	"NLc+/KW7DDqNXzy+xhYT4sKghahtZd2T2KDagytqpewZdJzMdtKINVVOcsO7IsjVhI+zzbeF1hNv7c7N",
	"X4JyB6q1o73Wp0+3nwsFJXBDCdM9wd1u8rpttXUa9bRVrlgM9XxS3lkY8cgKd6rWJxY6XMMm9zOKDP2e",
	"yTuqE5J37UVKKB4uB3Zlan9B8HoFxQ1+RKY79xAJZy/ddQCiGsWbhK67fj4qLE4EvJSCctNy+F24AnGm",
	"/d1C6rA5h1tgQlY2ETYXHLVieIJXxsjJaMREQdhKaDN5OX45xpvrzb8BAAD//+58SpMjIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
